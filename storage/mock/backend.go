// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/johandroz/srp/storage (interfaces: Backend)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Backend is a mock of Backend interface
type Backend struct {
	ctrl     *gomock.Controller
	recorder *BackendMockRecorder
}

// BackendMockRecorder is the mock recorder for Backend
type BackendMockRecorder struct {
	mock *Backend
}

// NewBackend creates a new mock instance
func NewBackend(ctrl *gomock.Controller) *Backend {
	mock := &Backend{ctrl: ctrl}
	mock.recorder = &BackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Backend) EXPECT() *BackendMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *Backend) Delete(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *BackendMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Backend)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *Backend) Get(arg0 context.Context, arg1 string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *BackendMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Backend)(nil).Get), arg0, arg1)
}

// Put mocks base method
func (m *Backend) Put(arg0 context.Context, arg1 string, arg2 map[string]interface{}) error {
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *BackendMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*Backend)(nil).Put), arg0, arg1, arg2)
}
